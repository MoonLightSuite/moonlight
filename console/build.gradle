/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(":core")
    implementation project(":api")
    implementation project(":moonlightscript")
}

application {
    // Define the main class for the application.
    mainClass.set('eu.quanticol.moonlight.MoonLightConsole')
    applicationName = "mlconsole"
}

jar {
    archiveFileName = 'moonlight.jar'
    manifest {
        attributes "Main-Class": application.mainClass
    }
    doFirst {
        from {
            configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
            duplicatesStrategy(DuplicatesStrategy.WARN)
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

final DEPRECATED = 'Dangerous copying strategy adopted for legacy code, should be refactored. See https://docs.gradle.org/current/userguide/upgrading_version_5.html#implicit_duplicate_strategy_for_copy_or_archive_tasks_has_been_deprecated'

tasks.named('installDist') {
    logger.warn(DEPRECATED)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
tasks.named('distTar') {
    logger.warn(DEPRECATED)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
tasks.named('distZip') {
    logger.warn(DEPRECATED)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


task distribution(type: Copy, dependsOn:[jar, installDist]) {
    println "exec distribution Task!"
    logger.warn(DEPRECATED)
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    copy {
        from jar
        into rootProject.file("distribution_files/java/lib/")
    }
    copy {
        from jar
        into rootProject.file("distribution_files/matlab/moonlight/jar")
    }
    copy {
        from jar
        into rootProject.file("distribution_files/python/jar")
    }
    copy {
        from "$buildDir/install/mlconsole/"
        into rootProject.file("distribution_files/console/")
    }
    copy {
        from jar
        into rootProject.file("distribution_files/console/lib/")
    }
}

task release(type: Copy, dependsOn: distribution) {
    from rootProject.file("distribution_files/")
    into rootProject.file("distribution/")
}

//task distributionZip(type: Zip, dependsOn: distribution) {
//    archiveFileName = "moonlight.zip"
//    destinationDirectory = file("$rootDir/distribution/")
//    from "$rootDir/distribution/"
//}